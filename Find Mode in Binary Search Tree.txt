//https://leetcode.com/problems/find-mode-in-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        vector<int> ans;
        unordered_map<int, int> m;
        queue<TreeNode* > q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            m[node->val]++;
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
        }
        int maxCount = 0;
        for(auto it : m){
            if(it.second > maxCount){
                ans = {it.first};
                maxCount = it.second;
            }else if(it.second == maxCount){
                ans.push_back(it.first);
            }else continue;
        }
        return ans;
    }
};
