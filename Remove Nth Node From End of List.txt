//https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        while(curr != NULL){
            ListNode* tmp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = tmp;
        }
        return prev;
    }

    ListNode* removeElements(ListNode* head, int n) {       
        if(!head) return NULL;
        head->next = removeElements(head->next, n - 1);
        return n == 1 ? head->next : head;
    }

    ListNode* removeNthFromEnd(ListNode* head, int n) {
        return reverseList(removeElements(reverseList(head), n));
    }
};
