//https://leetcode.com/problems/binary-tree-paths/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> v;
        if(!root) return v;
        queue<pair<TreeNode* , string> > q;
        q.push({root, ""});
        while(!q.empty()){
            TreeNode* node = q.front().first;
            string s = q.front().second + to_string(node->val);
            q.pop();
            if(!node->left && !node->right) v.push_back(s);
            if(node->left) q.push({node->left, s + "->"});
            if(node->right) q.push({node->right, s + "->"});
        }
        return v;
    }
};