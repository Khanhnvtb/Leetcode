//https://leetcode.com/problems/leaf-similar-trees/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameVector(vector<int> v1, vector<int> v2){
        if(v1.size() != v2.size()) return false;
        for(int i = 0; i < v1.size(); i++)
            if(v1[i] != v2[i]) return false;
        return true;
    } 

    vector<int> convert(TreeNode* root){
        vector<int> ans;
        stack<TreeNode* > s;
        if(root) s.push(root);
        while(!s.empty()){
            TreeNode* node = s.top();
            s.pop();
            if(!node->left && !node->right) ans.push_back(node->val);
            if(node->right) s.push(node->right);
            if(node->left) s.push(node->left);
        }
        return ans;
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        return isSameVector(convert(root1), convert(root2));
    }
};
