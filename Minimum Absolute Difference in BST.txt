//https://leetcode.com/problems/minimum-absolute-difference-in-bst/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        queue<TreeNode *> q;
        q.push(root);
        vector<int> value;
        while(!q.empty()){
            TreeNode* node = q.front();
            value.push_back(node->val);
            q.pop();
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
        }
        sort(value.begin(), value.end());
        int ans = INT_MAX;
        for(int i = 0; i < value.size() - 1; i++)
            ans = min(value[i + 1] - value[i], ans);
        return ans;
    }
};
