//https://leetcode.com/problems/longest-harmonious-subsequence/description/

class Solution
{
    public:
        int findLHS(vector<int> &nums)
        {
            if (nums.size() == 0) return 0;
            vector<int> v;
            unordered_map<int, int> m;
            for (int i = 0; i < nums.size(); i++)
            {
                m[nums[i]]++;
                if (m[nums[i]] == 1) v.push_back(nums[i]);
            }
            sort(v.begin(), v.end());
            int res = 0;
            for (int i = 1; i < v.size(); i++)
                if (v[i] - 1 == v[i - 1]) res = max(res, m[v[i]] + m[v[i - 1]]);
            return res;
        }
};