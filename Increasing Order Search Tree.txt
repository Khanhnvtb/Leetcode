//https://leetcode.com/problems/increasing-order-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* ans;
    void postOrder(TreeNode* root){
        if(root->right) postOrder(root->right);
        ans = new TreeNode(root->val, nullptr, ans);
        if(root->left) postOrder(root->left);
    }

    TreeNode* increasingBST(TreeNode* root) {
        if(!root) return nullptr;
        postOrder(root);
        return ans;
    }
};https://leetcode.com/problems/increasing-order-search-tree/
