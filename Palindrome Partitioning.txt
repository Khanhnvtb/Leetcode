//https://leetcode.com/problems/palindrome-partitioning/description/

class Solution {
public:
    int n;
    string str;
    vector<vector<string>> ans;
    bool isPalindrome(string s){
        if(s.length() == 0) return false;
        int l = 0, r = s.length() - 1;
        while(l < r){
            if(s[l++] != s[r--]) return false;
        }
        return true;
    }
    void Try(int i, string s, vector<string> v){
        if(i == n){
            if(isPalindrome(s)){
                v.push_back(s);
                ans.push_back(v);
            }
            return;
        }
        Try(i + 1, s + str[i], v);
        if(isPalindrome(s)) {
            v.push_back(s);
            s = "";
            s += str[i];
            Try(i + 1, s, v);
        }
    }
    vector<vector<string>> partition(string s) {
        n = s.length();
        str = s;
        vector<string> v;
        Try(0, "", v);
        return ans;
    }
};