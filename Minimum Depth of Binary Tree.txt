//https://leetcode.com/problems/minimum-depth-of-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;
    void find(TreeNode* root, int cnt){
        if(!root->left && !root->right) {
            ans = min(ans, cnt);
            return;
        }
        if(root->left) find(root->left, cnt + 1);
        if(root->right) find(root->right, cnt + 1);
    }
    
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        ans = INT_MAX;
        find(root, 1);
        return ans;
    }
};