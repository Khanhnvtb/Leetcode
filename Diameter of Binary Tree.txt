//https://leetcode.com/problems/diameter-of-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    int maxDepth(TreeNode* root){
        if(!root) return 0;
        if(!root->left && !root->right) return 0;
        if(!root->left) return maxDepth(root->right) + 1;
        if(!root->right) return maxDepth(root->left) + 1;
        return max(maxDepth(root->left), maxDepth(root->right)) + 1;
    }
    int maxPath(TreeNode* root){
        if(!root) return 0;
        if(!root->left && !root->right) return 0;
        if(!root->left) return maxDepth(root->right) + 1;
        if(!root->right) return maxDepth(root->left) + 1;
        return maxDepth(root->right) + maxDepth(root->left) + 2;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        queue<TreeNode* > q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            ans = max(ans, maxPath(node));
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
            q.pop();
        }
        return ans;
    }
};